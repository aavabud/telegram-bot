# ... (–≤–µ—Å—å —Ç–≤–æ–π –∫–æ–¥ —Å–≤–µ—Ä—Ö—É –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)


# ==== –¢–ï–°–¢–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê /testsend ====
async def test_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await context.bot.send_message(
            chat_id=7124318893,  # –¢–≤–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π user_id
            text="‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        )
        await update.message.reply_text("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 7124318893.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")


# ==== –ó–ê–ü–£–°–ö ====
async def post_init(app):
    scheduler = AsyncIOScheduler(timezone="UTC")
    scheduler.add_job(send_reminder, "cron", hour="9-16", minute=0, day_of_week="mon-fri", args=[app])
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")


def main():
    if not BOT_TOKEN:
        raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ .env")

    app = ApplicationBuilder().token(BOT_TOKEN).post_init(post_init).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("testsend", test_send))  # <--- –¥–æ–±–∞–≤–ª–µ–Ω–æ
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    app.run_polling()


if __name__ == "__main__":
    main()
