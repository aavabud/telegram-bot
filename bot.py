import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timezone
from dotenv import load_dotenv
import os

# ==== CONFIG ====
GROUP_CHAT_ID = -1002280657250  # ID –≤–∞—à–µ–π Telegram-–≥—Ä—É–ø–ø—ã

# ==== LOGGING ====
logging.basicConfig(level=logging.INFO)

# ==== –ó–ê–ì–†–£–ó–ö–ê –¢–û–ö–ï–ù–ê ====
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")


# ==== –û–ë–†–ê–ë–û–¢–ö–ê /start ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = user.language_code

    if lang == "uk":
        text = "üèóÔ∏è –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!\n–ú–∏ ‚Äî –∫–æ–º–ø–∞–Ω—ñ—è –ê–≤–∞–±—É–¥ üß±\nüìû –ó–≤‚Äô—è–∑–æ–∫: +380957347113"
        keyboard = [["üì® –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤–∫—É", "üìû –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏"]]
    else:
        text = "üèóÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ú—ã ‚Äî –∫–æ–º–ø–∞–Ω–∏—è –ê–≤–∞–±—É–¥ üß±\nüìû –°–≤—è–∑—å: +380957347113"
        keyboard = [["üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"]]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with open("clients.txt", "a") as f:
        f.write(f"{user.id} ‚Äî {datetime.now(timezone.utc).isoformat()}\n")


# ==== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ====
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message_text = update.message.text.lower()
    lang = user.language_code

    # –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=f"üì• –ó–∞—è–≤–∫–∞ –æ—Ç @{user.username or user.first_name} ({user.id}):\n{update.message.text}"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if "—Å–≤—è–∑" in message_text or "–∑–≤‚Äô—è–∑" in message_text:
        response = "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: +380957347113" if lang != "uk" else "üìû –ó–≤‚Äô—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏: +380957347113"
    elif "–∑–∞—è–≤–∫" in message_text or "–Ω–∞–¥—ñ—Å–ª–∞—Ç" in message_text or "–æ—Ç–ø—Ä–∞–≤" in message_text:
        response = "üì® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤." if lang != "uk" else "üì® –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –±—É–¥–º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤."
    else:
        response = "ü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏–º." if lang != "uk" else "ü§ñ –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –ú–∏ —Å–∫–æ—Ä–æ –≤–∞–º –≤—ñ–¥–ø–æ–≤—ñ–º–æ."

    await update.message.reply_text(response)


# ==== –†–ê–°–°–´–õ–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ====
async def send_reminder(app):
    if not os.path.exists("clients.txt"):
        return

    with open("clients.txt") as f:
        ids = set()
        for line in f:
            if line.strip():
                parts = line.strip().split("‚Äî")
                if parts and parts[0].strip().isdigit():
                    ids.add(parts[0].strip())

    for user_id in ids:
        try:
            await app.bot.send_message(
                chat_id=int(user_id),
                text="üë∑ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã.\n–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! üì¶"
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# ==== –ó–ê–ü–£–°–ö ====
async def post_init(app):
    scheduler = AsyncIOScheduler(timezone="UTC")
    scheduler.add_job(send_reminder, "cron", hour="9-16", minute=0, day_of_week="mon-fri", args=[app])
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")


def main():
    if not BOT_TOKEN:
        raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ .env")

    app = ApplicationBuilder().token(BOT_TOKEN).post_init(post_init).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    app.run_polling()


if __name__ == "__main__":
    main()
